// heights: 0 2 1  5 6 2 3 0
// idx:    -1 0 1  2 3 4 5 6

// left:     -1 -1 1 2 1 4 
// right:     1  6 4 4 6 6
    
// if(heights[i] < heights[i - 1]): left[i] = left[k], where heights[k] is the first < i;
//                                  right[i - 1] = i
// if(heights[i] > heights[i - 1]): left[i] = i - 1, push i into the stack

class Solution {
    public int largestRectangleArea(int[] heights) {
        if(heights == null || heights.length == 0)
            return 0;
        
        int m = heights.length;
        // rectangle i's left most width index (not include the index)
        int[] leftSide = new int[m];
        // rectangle i's right most width index (not include the index)
        int[] rightSide = new int[m];
        leftSide[0] = -1;
        Stack<Integer> idxStack = new Stack<>();
        idxStack.push(0);
        
        for(int i = 1; i < m; i++) {
            if(heights[i] < heights[i - 1]) {
                
                while(!idxStack.isEmpty() && heights[idxStack.peek()] > heights[i]) {
                    rightSide[idxStack.peek()] = i;
                    idxStack.pop();
                }
                if(idxStack.isEmpty()) {
                    leftSide[i] = -1;
                }
                else if(heights[idxStack.peek()] < heights[i]) {
                    leftSide[i] = idxStack.peek();
                }
                else {
                    leftSide[i] = leftSide[idxStack.peek()];
                }
                idxStack.push(i);
            }
            else if(heights[i] > heights[i - 1]) {
                leftSide[i] = i - 1;
                idxStack.push(i);
            }
            else {
                leftSide[i] = leftSide[i - 1];
                idxStack.push(i);
            }
        }
        
        for(int i = 0; i < m; i++) {
            if(rightSide[i] == 0)
                rightSide[i] = m;
        }
        
        int largest = 0;
        for(int i = 0; i < m; i++) {
            int area = (rightSide[i] - leftSide[i] - 1) * heights[i];
            largest = Math.max(largest, area);
        }
        return largest;
    }
}
