class Solution {
    public int calculate(String s) {
        if(s == null || s.length() == 0) {
            return 0;
        }
        
        Stack<Integer> nums = new Stack<>();
        Stack<Character> ops = new Stack<>();
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(c == ' ') continue;
            if(Character.isDigit(c)) {
                int num = c - '0';
                while(i + 1 < s.length() && Character.isDigit(s.charAt(i + 1))) {
                    num = num * 10 + (s.charAt(i + 1) - '0');
                    i++;
                }
                nums.push(num);
            }
            else if(isOperator(c)) {
                while(!ops.isEmpty() && hasPriority(c, ops.peek())) {
                    int tempNum = operate(nums.pop(), nums.pop(), ops.pop());
                    nums.push(tempNum);
                }
                ops.push(c);
            }
            else if(c == '(') {
                ops.push(c);
            }
            else if(c == ')') {
                while(!ops.isEmpty() && ops.peek() != '(') {
                    int tempNum = operate(nums.pop(), nums.pop(), ops.pop());
                    nums.push(tempNum);
                }
                ops.pop();
            }
        }
        
        while(!ops.isEmpty()) {
            int tempNum = operate(nums.pop(), nums.pop(), ops.pop());
            nums.push(tempNum);
        }
        
        return nums.pop();
    }
    
    private boolean isOperator(char c) {
        return c == '+' || c == '-' || c == '*' || c == '/';
    }
    
    private boolean hasPriority(char c1, char c2) {
        if(c2 == '(' || c2 == ')')
            return false;
        return !((c1 == '*' || c1 == '/') && (c2 == '+' || c2 == '-'));
    }
    
    private int operate(int n1, int n2, char c) {
        if(c == '+') return n1 + n2;
        else if(c == '-') return n2 - n1;
        else if(c == '*') return n1 * n2;
        else return n2 / n1;
    }
}
